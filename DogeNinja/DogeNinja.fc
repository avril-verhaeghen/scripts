using System;
//css_inc ShortLinkUtilities
using FaucetCollector.Script;

public class DogeNinjaScript : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings(BaseUrl)
            {
                new FaucetSetting() {
                    Name = "Email",
                    Display = "Email",
                    Type = EditorType.TextBox,
                    Required = true
                },
                new FaucetSetting() {
                    Name = "Password",
                    Display = "Password",
                    Type = EditorType.Password,
                    Required = true
                },
                new FaucetSetting() {
                    Name = "DoShortlinks",
                    Display = "Do Shortlinks",
                    Type = EditorType.CheckBox,
                    Default = true
                },
                new FaucetSetting() {
                    Name = "PTC",
                    Display = "Paid to Click",
                    Type = EditorType.CheckBox,
                    Default = true
                }
            };
        }
    }

    public const string BaseUrl = "https://doge.ninja/";
    public const string LoginUrl = BaseUrl + "login";
    public const string FaucetUrl = BaseUrl + "faucet";
    public const string ShortlinksUrl = BaseUrl + "shortlinks";
    public const string PTCUrl = BaseUrl + "ptc";

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "Doge.ninja";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//div[@class='alert alert-success']";
        FailXPath = "//div[@class='alert alert-danger']";

        //Let Faucet Collector start up everything
        base.Start();
    }

    /// <summary>
    /// This is the first method to run after the browser is opened and the first page is loaded.
    /// </summary>
    public override int DoInit()
    {
        //Let Faucet Collector continue.
        return base.DoInit();
    }

    /// <summary>
    /// This method gets called after the Start method, here you need to return if we are logged in or not.
    /// If you return false then it will call the BeforeLogin, Login and AfterLogin methods so you can login.
    /// After those Login methods are called it will call this IsLoggedIn method again to see if the login did succeed.
    /// If you return true Faucet Collector will store all cookies so it will probably be already logged in on the next attempt.
    /// </summary>
    public override bool IsLoggedIn()
    {
        //In here we can check for the presence of an element that is only present when you are logged in.
        //In this case we check for en element with the class "loggedIn"
        return ElementByXPath("li[@class='profile-info dropdown']") != null;
    }

    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
        if (!Driver.Url.Contains(LoginUrl)) {
            GoToUrl(LoginUrl);
            Wait();
        }

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }

    /// <summary>
    /// This method gets called after BeforeLogin, but only if IsLoggedIn returned false.
    /// It can be used to actually login the user/enter wallet details in the faucet
    /// </summary>
    /// <returns></returns>
    public override int DoLogin()
    {
        var User = ElementByXPath("//div[@class='login-container']//input[@id='email']");
        if (!IsVisible(User)) {
            return Fail("Username field not found");
        }
        SetText(User, GetSetting("Email"));

        var Password = ElementByXPath("//div[@class='login-container']//input[@id='password']");
        if (!IsVisible(Password)) {
            return Fail("Password field not found");
        }
        SetText(Password, GetPassword("Password"));

        var result = DoSolveCaptcha();
        if (result > 0) {
            return Fail("Fail solve captcha");
        }

        var LoginButton = ElementByXPath("//div[@class='login-container']//button[@class='btn btn-primary btn-block btn-login']");
        Click(LoginButton);
        Wait();


        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
    }

    /// <summary>
    /// This method gets called after the DoLogin method.
    /// </summary>
    public override int AfterLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
    }

    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// Return the number of seconds the bot should wait.
    /// </summary>
    public override int GetFaucetWaitTime()
    {
        //let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }

    /// <summary>
    /// This method is called right before a captcha will be solved.
    /// If you call SolveCaptcha() in other methods it will start this flow and tries to solve the captcha on the page.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {
        if (GetBoolSetting("DoShortlinks") && !Driver.Url.Contains(ShortlinksUrl)) {
            GoToUrl(ShortlinksUrl);
            Wait();

            /////////////////////
            /// Do Shortlinks ///
            /////////////////////
            var Shortlinks = ElementsByXPath("//div[@class='row center home-textbox']//a[@class='btn btn-white']");

            if (Shortlinks.Count > 0) {
                int NShort = Random(0, Shortlinks.Count - 1);

                try {
                    Click(Shortlinks[NShort]);
                    Wait();

                    ShortLinkBypasser bypasser = new ShortLinkBypasser(this);

                    if (bypasser.IsValidShortLink()) {
                        bool cs = bypasser.DoShortLink();

                        if (cs) {
                            Log("ShortlinkSuccess");
                        } else {
                            Log("Something is wrong with the shortlink");
                        }
                    } else {
                        GoToUrl(ShortlinksUrl);
                        return Fail("Something went wrong shortlink this is not a shortlink");
                    }
                } finally {
                    if (!Driver.Url.Contains(ShortlinksUrl)) {
                        GoToUrl(ShortlinksUrl);
                    }
                }
            } else {
                Log("No more shortlinks available");
            }
        }

        /////////////////////
        /// Paid to Click ///
        /////////////////////
        if (GetBoolSetting("PTC") && !Driver.Url.Contains(PTCUrl)) {
            GoToUrl(PTCUrl);
            Wait();

            var PTCs = ElementsByXPath("//div[@class='tile-stats tile-white']//div[@class='num']//a");

            if (PTCs.Count > 0) {
                int NShort = Random(0, PTCs.Count - 1);

                try {
                    Click(PTCs[NShort]);
                    Wait();

                    ShortLinkBypasser bypasser = new ShortLinkBypasser(this);

                    if (bypasser.IsValidShortLink()) {
                        bool cs = bypasser.DoShortLink();

                        if (cs) {
                            Log("PTC Success");
                        } else {
                            Log("Something is wrong with the Paid to Click link");
                        }
                    } else {
                        GoToUrl(ShortlinksUrl);
                        return Fail("Something went wrong shortlink this is not a Paid to Click link");
                    }
                } finally {
                    if (!Driver.Url.Contains(PTCUrl)) {
                        GoToUrl(PTCUrl);
                    }
                }
            }
        }

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active.
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

    /// <summary>
    /// This method is called right before we attempt to claim on the faucet. So we are logged in and good to go.
    /// Next methods that will be called are DoSolveFaucet, AfterSolveFaucet and CheckFaucetResult.
    /// </summary>
    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after the BeforeSolveFaucet. You can do the actual claiming of the faucet in here.
    /// </summary>
    /// <returns></returns>
    public override int DoSolveFaucet()
    {
        ////////////////////
        /// Claim Faucet ///
        ////////////////////
        var timer = ElementByXPath("div[@id='timer']");

        if (IsVisible(timer)) {
            return GetFaucetWaitTime();
        }

        var ClaimButton = ElementByXPath("a[@class='btn btn-primary btn-lg'][contains(text(), 'Claim!')]");
        Click(ClaimButton);
        Wait(5, 10);

        ShortLinkBypasser bypasser = new ShortLinkBypasser(this);

        if (bypasser.IsValidShortLink()) {
            bool cs = bypasser.DoShortLink();

            if (cs) {
                Log("Claim success");
            } else {
                Log("Something is wrong with the claim");
            }
        } else {
            GoToUrl(FaucetUrl);
            return Fail("Something went wrong shortlink this is not a faucet link");
        }

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
    }

    /// <summary>
    /// This method will get called after the DoSolveFaucet is completed and returned it was a success.
    /// For example you can wait for a processing popup to go away until actual faucet claim result is on the page.
    /// </summary>
    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
}
